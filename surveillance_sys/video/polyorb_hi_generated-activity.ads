--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated.Types;
with PolyORB_HI.Errors;
with PolyORB_HI_Generated.Deployment;
with Ada.Real_Time;
with PolyORB_HI.Periodic_Task;
pragma Elaborate_All (PolyORB_HI.Periodic_Task);

package PolyORB_HI_Generated.Activity is

  --  BEGIN: Entities used by all instances of component video_captor.impl

  type surveillance_system_video_captor_impl_Port_Type is
   (camera1_capture,
    camera2_capture,
    camera3_capture,
    output_converted);

  type surveillance_system_video_captor_impl_Interface 
   (Port : surveillance_system_video_captor_impl_Port_Type := surveillance_system_video_captor_impl_Port_Type'First)
  is
    record
      case Port is
        when camera1_capture =>
          camera1_capture_DATA : PolyORB_HI_Generated.Types.camera_image;
        when camera2_capture =>
          camera2_capture_DATA : PolyORB_HI_Generated.Types.camera_image;
        when camera3_capture =>
          camera3_capture_DATA : PolyORB_HI_Generated.Types.camera_image;
        when output_converted =>
          output_converted_DATA : PolyORB_HI_Generated.Types.captor_data;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_captor_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_video_captor_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_captor_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_captor_impl_Port_Type)
   return surveillance_system_video_captor_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_captor_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_captor_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_captor_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_captor_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_video_captor_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out surveillance_system_video_captor_impl_Port_Type);

  --  END: Entities used by all instances of component video_captor.impl

  --  Periodic task : video_captor_t

  function surveillance_system_video_captor_t_Job return PolyORB_HI.Errors.Error_Kind;

  package surveillance_system_video_captor_t_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.video_video_captor_t_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (3000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (3000),
      Task_Priority => 13,
      Task_Stack_Size => 100000,
      Job => surveillance_system_video_captor_t_Job);

  --  BEGIN: Entities used by all instances of component video_sender.impl

  type surveillance_system_video_sender_impl_Port_Type is
   (message);

  type surveillance_system_video_sender_impl_Interface 
   (Port : surveillance_system_video_sender_impl_Port_Type := surveillance_system_video_sender_impl_Port_Type'First)
  is
    record
      case Port is
        when message =>
          message_DATA : PolyORB_HI_Generated.Types.captor_data;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_sender_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_video_sender_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_sender_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_sender_impl_Port_Type)
   return surveillance_system_video_sender_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_sender_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_sender_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_sender_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_video_sender_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_video_sender_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out surveillance_system_video_sender_impl_Port_Type);

  --  END: Entities used by all instances of component video_sender.impl

  --  Periodic task : video_sender_t

  function surveillance_system_video_sender_t_Job return PolyORB_HI.Errors.Error_Kind;

  package surveillance_system_video_sender_t_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.video_video_sender_t_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (2000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (2000),
      Task_Priority => 10,
      Task_Stack_Size => 100000,
      Job => surveillance_system_video_sender_t_Job);

end PolyORB_HI_Generated.Activity;
