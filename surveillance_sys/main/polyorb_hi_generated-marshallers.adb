--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Marshallers_G;
pragma Elaborate_All (PolyORB_HI.Marshallers_G);
with PolyORB_HI_Generated;

package body PolyORB_HI_Generated.Marshallers is

  --  Marshallers for DATA type state

  package state_Marshallers is
   new PolyORB_HI.Marshallers_G
     (PolyORB_HI_Generated.Types.state);

  procedure Marshall
   (Data : PolyORB_HI_Generated.Types.state;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames state_Marshallers.Marshall;

  procedure Unmarshall
   (Data : out PolyORB_HI_Generated.Types.state;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames state_Marshallers.Unmarshall;

  --  Marshallers for interface type of thread alarm_activator.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    pragma Unreferenced
     (Data);
  begin
    null;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    test_DATA : PolyORB_HI_Generated.Types.Integer_Type;
    test1_DATA : PolyORB_HI_Generated.Types.Integer_Type;
    test2_DATA : PolyORB_HI_Generated.Types.Integer_Type;
    test3_DATA : PolyORB_HI_Generated.Types.Integer_Type;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.test)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (test_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.test,
          test_DATA => test_DATA);
    elsif (Port
      = PolyORB_HI_Generated.Activity.test1)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (test1_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.test1,
          test1_DATA => test1_DATA);
    elsif (Port
      = PolyORB_HI_Generated.Activity.test2)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (test2_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.test2,
          test2_DATA => test2_DATA);
    elsif (Port
      = PolyORB_HI_Generated.Activity.test3)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (test3_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.test3,
          test3_DATA => test3_DATA);
    end if;
  end Unmarshall;

  --  Marshallers for DATA type integer_type

  package Integer_Type_Marshallers is
   new PolyORB_HI.Marshallers_G
     (PolyORB_HI_Generated.Types.Integer_Type);

  procedure Marshall
   (Data : PolyORB_HI_Generated.Types.Integer_Type;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames Integer_Type_Marshallers.Marshall;

  procedure Unmarshall
   (Data : out PolyORB_HI_Generated.Types.Integer_Type;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames Integer_Type_Marshallers.Unmarshall;

  --  Marshallers for interface type of thread detector.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.surveillance_system_detector_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.test)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.test_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.surveillance_system_detector_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.surveillance_system_detector_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.motion)
    then
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_detector_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion);
    elsif (Port
      = PolyORB_HI_Generated.Activity.door)
    then
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_detector_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.door);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread detector.impl1

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.surveillance_system_detector_impl1_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.test)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.test_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.surveillance_system_detector_impl1_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.surveillance_system_detector_impl1_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.motion)
    then
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_detector_impl1_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion);
    elsif (Port
      = PolyORB_HI_Generated.Activity.door)
    then
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_detector_impl1_Interface'
         (Port => PolyORB_HI_Generated.Activity.door);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread detector.impl2

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.surveillance_system_detector_impl2_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.test)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.test_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.surveillance_system_detector_impl2_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.surveillance_system_detector_impl2_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.motion)
    then
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_detector_impl2_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion);
    elsif (Port
      = PolyORB_HI_Generated.Activity.door)
    then
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_detector_impl2_Interface'
         (Port => PolyORB_HI_Generated.Activity.door);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread rfid_thread.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.surveillance_system_rfid_thread_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.door)
    then
      null;
    elsif (Data.Port
      = PolyORB_HI_Generated.Activity.motion)
    then
      null;
    elsif (Data.Port
      = PolyORB_HI_Generated.Activity.test)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.test_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.surveillance_system_rfid_thread_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.surveillance_system_rfid_thread_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.rfid_read)
    then
      Data :=
       PolyORB_HI_Generated.Activity.surveillance_system_rfid_thread_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.rfid_read);
    end if;
  end Unmarshall;

end PolyORB_HI_Generated.Marshallers;
