--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated.Types;
with PolyORB_HI.Errors;
with PolyORB_HI_Generated.Deployment;
with Ada.Real_Time;
with PolyORB_HI.Periodic_Task;
pragma Elaborate_All (PolyORB_HI.Periodic_Task);

package PolyORB_HI_Generated.Activity is

  current_state : PolyORB_HI_Generated.Types.state;

  --  BEGIN: Entities used by all instances of component alarm_activator.impl

  type surveillance_system_alarm_activator_impl_Port_Type is
   (detected);

  type surveillance_system_alarm_activator_impl_Interface 
   (Port : surveillance_system_alarm_activator_impl_Port_Type := surveillance_system_alarm_activator_impl_Port_Type'First)
  is
    record
      case Port is
        when detected =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_alarm_activator_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_alarm_activator_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_alarm_activator_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_alarm_activator_impl_Port_Type)
   return surveillance_system_alarm_activator_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_alarm_activator_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_alarm_activator_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_alarm_activator_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_alarm_activator_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_alarm_activator_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out surveillance_system_alarm_activator_impl_Port_Type);

  --  END: Entities used by all instances of component alarm_activator.impl

  --  Periodic task : alarm

  function surveillance_system_alarm_Job return PolyORB_HI.Errors.Error_Kind;

  package surveillance_system_alarm_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_alarm_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1500),
      Task_Priority => 10,
      Task_Stack_Size => 100000,
      Job => surveillance_system_alarm_Job);

  --  BEGIN: Entities used by all instances of component detector.impl

  type surveillance_system_detector_impl_Port_Type is
   (motion,
    door);

  type surveillance_system_detector_impl_Interface 
   (Port : surveillance_system_detector_impl_Port_Type := surveillance_system_detector_impl_Port_Type'First)
  is
    record
      case Port is
        when motion =>
          null;
        when door =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_detector_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_detector_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_detector_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_detector_impl_Port_Type)
   return surveillance_system_detector_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_detector_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_detector_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_detector_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_detector_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_detector_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out surveillance_system_detector_impl_Port_Type);

  --  END: Entities used by all instances of component detector.impl

  --  Periodic task : detector1

  function surveillance_system_detector1_Job return PolyORB_HI.Errors.Error_Kind;

  package surveillance_system_detector1_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_detector1_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1500),
      Task_Priority => 90,
      Task_Stack_Size => 100000,
      Job => surveillance_system_detector1_Job);

  --  Periodic task : detector2

  function surveillance_system_detector2_Job return PolyORB_HI.Errors.Error_Kind;

  package surveillance_system_detector2_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_detector2_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1500),
      Task_Priority => 90,
      Task_Stack_Size => 100000,
      Job => surveillance_system_detector2_Job);

  --  Periodic task : detector3

  function surveillance_system_detector3_Job return PolyORB_HI.Errors.Error_Kind;

  package surveillance_system_detector3_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_detector3_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1500),
      Task_Priority => 90,
      Task_Stack_Size => 100000,
      Job => surveillance_system_detector3_Job);

  --  BEGIN: Entities used by all instances of component rfid_thread.impl

  type surveillance_system_rfid_thread_impl_Port_Type is
   (rfid_read,
    door,
    motion);

  type surveillance_system_rfid_thread_impl_Interface 
   (Port : surveillance_system_rfid_thread_impl_Port_Type := surveillance_system_rfid_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when rfid_read =>
          null;
        when door =>
          null;
        when motion =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_rfid_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_rfid_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_rfid_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_rfid_thread_impl_Port_Type)
   return surveillance_system_rfid_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_rfid_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_rfid_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_rfid_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : surveillance_system_rfid_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : surveillance_system_rfid_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out surveillance_system_rfid_thread_impl_Port_Type);

  --  END: Entities used by all instances of component rfid_thread.impl

  --  Periodic task : rfid_reader

  function surveillance_system_rfid_reader_Job return PolyORB_HI.Errors.Error_Kind;

  package surveillance_system_rfid_reader_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_rfid_reader_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1500),
      Task_Priority => 80,
      Task_Stack_Size => 100000,
      Job => surveillance_system_rfid_reader_Job);

end PolyORB_HI_Generated.Activity;
