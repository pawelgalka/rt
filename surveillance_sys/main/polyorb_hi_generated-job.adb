--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated.Activity;
use PolyORB_HI_Generated.Activity;
with PolyORB_HI_Generated.Types;
with PolyORB_HI.Utils;
with PolyORB_HI_Generated.Subprograms;

package body PolyORB_HI_Generated.Job is

  --  Periodic task : alarm

  --  Periodic task : detector1

  --  Periodic task : detector2

  --  Periodic task : detector3

  --  Periodic task : rfid_reader

  -----------------------------------
  -- surveillance_system_alarm_Job -- 
  -----------------------------------

  procedure surveillance_system_alarm_Job
   (Result : out PolyORB_HI.Errors.Error_Kind)
  is
    test_V : PolyORB_HI_Generated.Types.Integer_Type;
    test_I : surveillance_system_alarm_activator_impl_Interface;
    test_C : constant Standard.Integer :=
     PolyORB_HI_Generated.Activity.Get_Count
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_alarm_activator_impl_Port_Type'
         (test));
    test1_V : PolyORB_HI_Generated.Types.Integer_Type;
    test1_I : surveillance_system_alarm_activator_impl_Interface;
    test1_C : constant Standard.Integer :=
     PolyORB_HI_Generated.Activity.Get_Count
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_alarm_activator_impl_Port_Type'
         (test1));
    test2_V : PolyORB_HI_Generated.Types.Integer_Type;
    test2_I : surveillance_system_alarm_activator_impl_Interface;
    test2_C : constant Standard.Integer :=
     PolyORB_HI_Generated.Activity.Get_Count
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_alarm_activator_impl_Port_Type'
         (test2));
    test3_V : PolyORB_HI_Generated.Types.Integer_Type;
    test3_I : surveillance_system_alarm_activator_impl_Interface;
    test3_C : constant Standard.Integer :=
     PolyORB_HI_Generated.Activity.Get_Count
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_alarm_activator_impl_Port_Type'
         (test3));
    activator_Status : PolyORB_HI_Generated.Subprograms.event_handlers_alarm_activator_Status;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (test_C
      /= -1)
    then
      PolyORB_HI_Generated.Activity.Get_Value
       (PolyORB_HI.Utils.Get_Task_Id,
        test,
        test_I);
      test_V :=
       test_I.test_DATA;
    else
      test_V :=
       PolyORB_HI_Generated.Types.Integer_Type_Default_Value;
    end if;
    if (test1_C
      /= -1)
    then
      PolyORB_HI_Generated.Activity.Get_Value
       (PolyORB_HI.Utils.Get_Task_Id,
        test1,
        test1_I);
      test1_V :=
       test1_I.test1_DATA;
    else
      test1_V :=
       PolyORB_HI_Generated.Types.Integer_Type_Default_Value;
    end if;
    if (test2_C
      /= -1)
    then
      PolyORB_HI_Generated.Activity.Get_Value
       (PolyORB_HI.Utils.Get_Task_Id,
        test2,
        test2_I);
      test2_V :=
       test2_I.test2_DATA;
    else
      test2_V :=
       PolyORB_HI_Generated.Types.Integer_Type_Default_Value;
    end if;
    if (test3_C
      /= -1)
    then
      PolyORB_HI_Generated.Activity.Get_Value
       (PolyORB_HI.Utils.Get_Task_Id,
        test3,
        test3_I);
      test3_V :=
       test3_I.test3_DATA;
    else
      test3_V :=
       PolyORB_HI_Generated.Types.Integer_Type_Default_Value;
    end if;
    --  Dequeue the IN port values
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_alarm_activator_impl_Port_Type'
       (test));
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_alarm_activator_impl_Port_Type'
       (test1));
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_alarm_activator_impl_Port_Type'
       (test2));
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_alarm_activator_impl_Port_Type'
       (test3));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.event_handlers_alarm_activator
     (det1 => test1_V,
      det2 => test2_V,
      det3 => test3_V,
      rfid => test_V,
      Status => activator_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (activator_Status,
      PolyORB_HI_Generated.Subprograms.event_handlers_alarm_activator_Port_Type'
       (PolyORB_HI_Generated.Subprograms.result))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_alarm_K,
        PolyORB_HI_Generated.Activity.surveillance_system_alarm_activator_impl_Interface'
         (Port => detected));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     PolyORB_HI_Generated.Activity.Send_Output
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_alarm_activator_impl_Port_Type'
         (detected));
    --  Return error code
    Result :=
     Error_Ü;
  end surveillance_system_alarm_Job;

  ---------------------------------------
  -- surveillance_system_detector1_Job -- 
  ---------------------------------------

  procedure surveillance_system_detector1_Job
   (Result : out PolyORB_HI.Errors.Error_Kind)
  is
    detector_handler_Status : PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler_Status;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_detector_impl_Port_Type'
       (motion));
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_detector_impl_Port_Type'
       (door));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler
     (Status => detector_handler_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (detector_handler_Status,
      PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler_Port_Type'
       (PolyORB_HI_Generated.Subprograms.Data_Source))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_detector1_K,
        PolyORB_HI_Generated.Activity.surveillance_system_detector_impl_Interface'
         (Port => test,
          test_DATA => PolyORB_HI_Generated.Subprograms.Get_Value
           (detector_handler_Status,
            PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler_Port_Type'
             (PolyORB_HI_Generated.Subprograms.Data_Source)).Data_Source_DATA));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     PolyORB_HI_Generated.Activity.Send_Output
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_detector_impl_Port_Type'
         (test));
    --  Return error code
    Result :=
     Error_Ü;
  end surveillance_system_detector1_Job;

  ---------------------------------------
  -- surveillance_system_detector2_Job -- 
  ---------------------------------------

  procedure surveillance_system_detector2_Job
   (Result : out PolyORB_HI.Errors.Error_Kind)
  is
    detector_handler_Status : PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler1_Status;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_detector_impl1_Port_Type'
       (motion));
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_detector_impl1_Port_Type'
       (door));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler1
     (Status => detector_handler_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (detector_handler_Status,
      PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler1_Port_Type'
       (PolyORB_HI_Generated.Subprograms.Data_Source))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_detector2_K,
        PolyORB_HI_Generated.Activity.surveillance_system_detector_impl1_Interface'
         (Port => test,
          test_DATA => PolyORB_HI_Generated.Subprograms.Get_Value
           (detector_handler_Status,
            PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler1_Port_Type'
             (PolyORB_HI_Generated.Subprograms.Data_Source)).Data_Source_DATA));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     PolyORB_HI_Generated.Activity.Send_Output
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_detector_impl1_Port_Type'
         (test));
    --  Return error code
    Result :=
     Error_Ü;
  end surveillance_system_detector2_Job;

  ---------------------------------------
  -- surveillance_system_detector3_Job -- 
  ---------------------------------------

  procedure surveillance_system_detector3_Job
   (Result : out PolyORB_HI.Errors.Error_Kind)
  is
    detector_handler_Status : PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler2_Status;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_detector_impl2_Port_Type'
       (motion));
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_detector_impl2_Port_Type'
       (door));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler2
     (Status => detector_handler_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (detector_handler_Status,
      PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler2_Port_Type'
       (PolyORB_HI_Generated.Subprograms.Data_Source))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_detector3_K,
        PolyORB_HI_Generated.Activity.surveillance_system_detector_impl2_Interface'
         (Port => test,
          test_DATA => PolyORB_HI_Generated.Subprograms.Get_Value
           (detector_handler_Status,
            PolyORB_HI_Generated.Subprograms.event_handlers_detection_handler2_Port_Type'
             (PolyORB_HI_Generated.Subprograms.Data_Source)).Data_Source_DATA));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     PolyORB_HI_Generated.Activity.Send_Output
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_detector_impl2_Port_Type'
         (test));
    --  Return error code
    Result :=
     Error_Ü;
  end surveillance_system_detector3_Job;

  -----------------------------------------
  -- surveillance_system_rfid_reader_Job -- 
  -----------------------------------------

  procedure surveillance_system_rfid_reader_Job
   (Result : out PolyORB_HI.Errors.Error_Kind)
  is
    detector_handler_Status : PolyORB_HI_Generated.Subprograms.event_handlers_rfid_handler_Status;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    PolyORB_HI_Generated.Activity.Next_Value
     (PolyORB_HI.Utils.Get_Task_Id,
      surveillance_system_rfid_thread_impl_Port_Type'
       (rfid_read));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.event_handlers_rfid_handler
     (Status => detector_handler_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (detector_handler_Status,
      PolyORB_HI_Generated.Subprograms.event_handlers_rfid_handler_Port_Type'
       (PolyORB_HI_Generated.Subprograms.Data_Source))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_rfid_reader_K,
        PolyORB_HI_Generated.Activity.surveillance_system_rfid_thread_impl_Interface'
         (Port => test,
          test_DATA => PolyORB_HI_Generated.Subprograms.Get_Value
           (detector_handler_Status,
            PolyORB_HI_Generated.Subprograms.event_handlers_rfid_handler_Port_Type'
             (PolyORB_HI_Generated.Subprograms.Data_Source)).Data_Source_DATA));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     PolyORB_HI_Generated.Activity.Send_Output
       (PolyORB_HI.Utils.Get_Task_Id,
        surveillance_system_rfid_thread_impl_Port_Type'
         (test));
    --  Return error code
    Result :=
     Error_Ü;
  end surveillance_system_rfid_reader_Job;

end PolyORB_HI_Generated.Job;
